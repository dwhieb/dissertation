#  #fileEncoding = "UTF-8",
#  quote        = FALSE,
#  row.names    = FALSE,
#  sep          = "\t"
#)
close(connection)
source("stats/scripts/load_data.R")
# This script bins wordforms based on their corpus dispersions
# (measured using Deviation of Proportions (DP))
# update this variable to point to the tab-delimited file of
# wordforms, frequencies, and dispersions
input_path <- "stats/data/Nuuchahnulth.tsv"
# update this variable to point to the location where
# you would like the list of selected wordforms generated
output_path <- "data/Nuuchahnulth/suggested_wordforms.txt"
# the number of wordforms to suggest
num_wordforms <- 100
# load data
data <- load_data(input_path)
data_filtered      <- data[which(data$frequency >= 4), ]
data_filtered$bins <- cut(data_filtered$dispersion, breaks = num_wordforms)
select_wordform_from_bin <- function(bin) {
observations <- data_filtered$item[which(data_filtered$bins == bin)]
if (length(observations)) return(sample(observations, size = 1))
else return(NA)
}
bins                          <- levels(data_filtered$bins)
suggested_wordforms           <- sapply(bins, select_wordform_from_bin)
suggested_wordforms           <- data.frame(suggested_wordforms)
colnames(suggested_wordforms) <- c("item")
data_filtered                 <- data_filtered[1:2]
suggested_wordforms           <- merge(data_filtered, suggested_wordforms, by = "item")
connection <- file(
output_path
#open = "w",
#encoding = "UTF-8"
)
writeLines(suggested_wordforms, connection, useBytes = TRUE)
#write.table(
#  suggested_wordforms,
#  file         = connection,
#  col.names    = FALSE,
#  #fileEncoding = "UTF-8",
#  quote        = FALSE,
#  row.names    = FALSE,
#  sep          = "\t"
#)
close(connection)
source("stats/scripts/load_data.R")
# This script bins wordforms based on their corpus dispersions
# (measured using Deviation of Proportions (DP))
# update this variable to point to the tab-delimited file of
# wordforms, frequencies, and dispersions
input_path <- "stats/data/Nuuchahnulth.tsv"
# update this variable to point to the location where
# you would like the list of selected wordforms generated
output_path <- "data/Nuuchahnulth/suggested_wordforms.txt"
# the number of wordforms to suggest
num_wordforms <- 100
# load data
data <- load_data(input_path)
data_filtered      <- data[which(data$frequency >= 4), ]
data_filtered$bins <- cut(data_filtered$dispersion, breaks = num_wordforms)
select_wordform_from_bin <- function(bin) {
observations <- data_filtered$item[which(data_filtered$bins == bin)]
if (length(observations)) return(sample(observations, size = 1))
else return(NA)
}
bins                          <- levels(data_filtered$bins)
suggested_wordforms           <- sapply(bins, select_wordform_from_bin)
suggested_wordforms           <- data.frame(suggested_wordforms)
colnames(suggested_wordforms) <- c("item")
data_filtered                 <- data_filtered[1:2]
suggested_wordforms           <- merge(data_filtered, suggested_wordforms, by = "item")
connection <- file(
output_path,
#open = "w",
encoding = "UTF-8"
)
writeLines(suggested_wordforms, connection, useBytes = TRUE)
#write.table(
#  suggested_wordforms,
#  file         = connection,
#  col.names    = FALSE,
#  #fileEncoding = "UTF-8",
#  quote        = FALSE,
#  row.names    = FALSE,
#  sep          = "\t"
#)
close(connection)
source("stats/scripts/load_data.R")
# This script bins wordforms based on their corpus dispersions
# (measured using Deviation of Proportions (DP))
# update this variable to point to the tab-delimited file of
# wordforms, frequencies, and dispersions
input_path <- "stats/data/Nuuchahnulth.tsv"
# update this variable to point to the location where
# you would like the list of selected wordforms generated
output_path <- "data/Nuuchahnulth/suggested_wordforms.txt"
# the number of wordforms to suggest
num_wordforms <- 100
# load data
data <- load_data(input_path)
data_filtered      <- data[which(data$frequency >= 4), ]
data_filtered$bins <- cut(data_filtered$dispersion, breaks = num_wordforms)
select_wordform_from_bin <- function(bin) {
observations <- data_filtered$item[which(data_filtered$bins == bin)]
if (length(observations)) return(sample(observations, size = 1))
else return(NA)
}
bins                          <- levels(data_filtered$bins)
suggested_wordforms           <- sapply(bins, select_wordform_from_bin)
suggested_wordforms           <- data.frame(suggested_wordforms)
colnames(suggested_wordforms) <- c("item")
data_filtered                 <- data_filtered[1:2]
suggested_wordforms           <- merge(data_filtered, suggested_wordforms, by = "item")
connection <- file(
output_path,
#open = "w",
encoding = "UTF-8"
)
write.table(
suggested_wordforms,
file         = connection,
col.names    = FALSE,
fileEncoding = "UTF-8",
quote        = FALSE,
row.names    = FALSE,
sep          = "\t"
)
close(connection)
source("stats/scripts/load_data.R")
# This script bins wordforms based on their corpus dispersions
# (measured using Deviation of Proportions (DP))
# update this variable to point to the tab-delimited file of
# wordforms, frequencies, and dispersions
input_path <- "stats/data/Nuuchahnulth.tsv"
# update this variable to point to the location where
# you would like the list of selected wordforms generated
output_path <- "data/Nuuchahnulth/suggested_wordforms.txt"
# the number of wordforms to suggest
num_wordforms <- 100
# load data
data <- load_data(input_path)
data_filtered      <- data[which(data$frequency >= 4), ]
data_filtered$bins <- cut(data_filtered$dispersion, breaks = num_wordforms)
select_wordform_from_bin <- function(bin) {
observations <- data_filtered$item[which(data_filtered$bins == bin)]
if (length(observations)) return(sample(observations, size = 1))
else return(NA)
}
bins                          <- levels(data_filtered$bins)
suggested_wordforms           <- sapply(bins, select_wordform_from_bin)
suggested_wordforms           <- data.frame(suggested_wordforms)
colnames(suggested_wordforms) <- c("item")
data_filtered                 <- data_filtered[1:2]
suggested_wordforms           <- merge(data_filtered, suggested_wordforms, by = "item")
connection <- file(
output_path,
open = "w",
encoding = "UTF-8"
)
write.table(
suggested_wordforms,
file         = connection,
col.names    = FALSE,
fileEncoding = "UTF-8",
quote        = FALSE,
row.names    = FALSE,
sep          = "\t"
)
close(connection)
source("stats/scripts/load_data.R")
# This script bins wordforms based on their corpus dispersions
# (measured using Deviation of Proportions (DP))
# update this variable to point to the tab-delimited file of
# wordforms, frequencies, and dispersions
input_path <- "stats/data/Nuuchahnulth.tsv"
# update this variable to point to the location where
# you would like the list of selected wordforms generated
output_path <- "data/Nuuchahnulth/suggested_wordforms.txt"
# the number of wordforms to suggest
num_wordforms <- 100
# load data
data <- load_data(input_path)
data_filtered      <- data[which(data$frequency >= 4), ]
data_filtered$bins <- cut(data_filtered$dispersion, breaks = num_wordforms)
select_wordform_from_bin <- function(bin) {
observations <- data_filtered$item[which(data_filtered$bins == bin)]
if (length(observations)) return(sample(observations, size = 1))
else return(NA)
}
bins                          <- levels(data_filtered$bins)
suggested_wordforms           <- sapply(bins, select_wordform_from_bin)
suggested_wordforms           <- data.frame(suggested_wordforms)
colnames(suggested_wordforms) <- c("item")
data_filtered                 <- data_filtered[1:2]
suggested_wordforms           <- merge(data_filtered, suggested_wordforms, by = "item")
connection <- file(
output_path,
open     = "wb",
encoding = "UTF-8"
)
write.table(
suggested_wordforms,
file         = connection,
col.names    = FALSE,
fileEncoding = "UTF-8",
quote        = FALSE,
row.names    = FALSE,
sep          = "\t"
)
close(connection)
source("stats/scripts/load_data.R")
# This script bins wordforms based on their corpus dispersions
# (measured using Deviation of Proportions (DP))
# update this variable to point to the tab-delimited file of
# wordforms, frequencies, and dispersions
input_path <- "stats/data/Nuuchahnulth.tsv"
# update this variable to point to the location where
# you would like the list of selected wordforms generated
output_path <- "data/Nuuchahnulth/suggested_wordforms.txt"
# the number of wordforms to suggest
num_wordforms <- 100
# load data
data <- load_data(input_path)
data_filtered      <- data[which(data$frequency >= 4), ]
data_filtered$bins <- cut(data_filtered$dispersion, breaks = num_wordforms)
select_wordform_from_bin <- function(bin) {
observations <- data_filtered$item[which(data_filtered$bins == bin)]
if (length(observations)) return(sample(observations, size = 1))
else return(NA)
}
bins                          <- levels(data_filtered$bins)
suggested_wordforms           <- sapply(bins, select_wordform_from_bin)
suggested_wordforms           <- data.frame(suggested_wordforms)
colnames(suggested_wordforms) <- c("item")
data_filtered                 <- data_filtered[1:2]
suggested_wordforms           <- merge(data_filtered, suggested_wordforms, by = "item")
connection <- file(
output_path,
open     = "w",
encoding = "UTF-8"
)
write.table(
suggested_wordforms,
file         = connection,
col.names    = FALSE,
fileEncoding = "UTF-8",
quote        = FALSE,
row.names    = FALSE,
sep          = "\t"
)
close(connection)
source("stats/scripts/load_data.R")
# This script bins wordforms based on their corpus dispersions
# (measured using Deviation of Proportions (DP))
# update this variable to point to the tab-delimited file of
# wordforms, frequencies, and dispersions
input_path <- "stats/data/Nuuchahnulth.tsv"
# update this variable to point to the location where
# you would like the list of selected wordforms generated
output_path <- "data/Nuuchahnulth/suggested_wordforms.txt"
# the number of wordforms to suggest
num_wordforms <- 100
# load data
data <- load_data(input_path)
data_filtered      <- data[which(data$frequency >= 4), ]
data_filtered$bins <- cut(data_filtered$dispersion, breaks = num_wordforms)
select_wordform_from_bin <- function(bin) {
observations <- data_filtered$item[which(data_filtered$bins == bin)]
if (length(observations)) return(sample(observations, size = 1))
else return(NA)
}
bins                          <- levels(data_filtered$bins)
suggested_wordforms           <- sapply(bins, select_wordform_from_bin)
suggested_wordforms           <- data.frame(suggested_wordforms)
colnames(suggested_wordforms) <- c("item")
data_filtered                 <- data_filtered[1:2]
suggested_wordforms           <- merge(data_filtered, suggested_wordforms, by = "item")
connection <- file(
output_path,
open     = "wb",
encoding = "UTF-8"
)
write.table(
suggested_wordforms,
file         = connection,
col.names    = FALSE,
fileEncoding = "UTF-8",
quote        = FALSE,
row.names    = FALSE,
sep          = "\t"
)
close(connection)
source("stats/scripts/load_data.R")
# This script bins wordforms based on their corpus dispersions
# (measured using Deviation of Proportions (DP))
# update this variable to point to the tab-delimited file of
# wordforms, frequencies, and dispersions
input_path <- "stats/data/Nuuchahnulth.tsv"
# update this variable to point to the location where
# you would like the list of selected wordforms generated
output_path <- "data/Nuuchahnulth/suggested_wordforms.txt"
# the number of wordforms to suggest
num_wordforms <- 100
# load data
data <- load_data(input_path)
data_filtered      <- data[which(data$frequency >= 4), ]
data_filtered$bins <- cut(data_filtered$dispersion, breaks = num_wordforms)
select_wordform_from_bin <- function(bin) {
observations <- data_filtered$item[which(data_filtered$bins == bin)]
if (length(observations)) return(sample(observations, size = 1))
else return(NA)
}
bins                          <- levels(data_filtered$bins)
suggested_wordforms           <- sapply(bins, select_wordform_from_bin)
suggested_wordforms           <- data.frame(suggested_wordforms)
colnames(suggested_wordforms) <- c("item")
data_filtered                 <- data_filtered[1:2]
suggested_wordforms           <- merge(data_filtered, suggested_wordforms, by = "item")
connection <- file(
output_path,
open     = "w",
encoding = "UTF-8"
)
write.table(
suggested_wordforms,
file         = connection,
col.names    = FALSE,
fileEncoding = "UTF-8",
quote        = FALSE,
row.names    = FALSE,
sep          = "\t"
)
close(connection)
library(readr)
source("stats/scripts/load_data.R")
# This script bins wordforms based on their corpus dispersions
# (measured using Deviation of Proportions (DP))
# update this variable to point to the tab-delimited file of
# wordforms, frequencies, and dispersions
input_path <- "stats/data/Nuuchahnulth.tsv"
# update this variable to point to the location where
# you would like the list of selected wordforms generated
output_path <- "data/Nuuchahnulth/suggested_wordforms.txt"
# the number of wordforms to suggest
num_wordforms <- 100
# load data
data <- load_data(input_path)
data_filtered      <- data[which(data$frequency >= 4), ]
data_filtered$bins <- cut(data_filtered$dispersion, breaks = num_wordforms)
select_wordform_from_bin <- function(bin) {
observations <- data_filtered$item[which(data_filtered$bins == bin)]
if (length(observations)) return(sample(observations, size = 1))
else return(NA)
}
bins                          <- levels(data_filtered$bins)
suggested_wordforms           <- sapply(bins, select_wordform_from_bin)
suggested_wordforms           <- data.frame(suggested_wordforms)
colnames(suggested_wordforms) <- c("item")
data_filtered                 <- data_filtered[1:2]
suggested_wordforms           <- merge(data_filtered, suggested_wordforms, by = "item")
write_tsv(
suggested_wordforms,
output_path,
col_names    = FALSE,
delim        = "\t",
quote_escape = FALSE
)
library(readr)
source("stats/scripts/load_data.R")
# This script bins wordforms based on their corpus dispersions
# (measured using Deviation of Proportions (DP))
# update this variable to point to the tab-delimited file of
# wordforms, frequencies, and dispersions
input_path <- "stats/data/Nuuchahnulth.tsv"
# update this variable to point to the location where
# you would like the list of selected wordforms generated
output_path <- "data/Nuuchahnulth/suggested_wordforms.txt"
# the number of wordforms to suggest
num_wordforms <- 100
# load data
data <- load_data(input_path)
data_filtered      <- data[which(data$frequency >= 4), ]
data_filtered$bins <- cut(data_filtered$dispersion, breaks = num_wordforms)
select_wordform_from_bin <- function(bin) {
observations <- data_filtered$item[which(data_filtered$bins == bin)]
if (length(observations)) return(sample(observations, size = 1))
else return(NA)
}
bins                          <- levels(data_filtered$bins)
suggested_wordforms           <- sapply(bins, select_wordform_from_bin)
suggested_wordforms           <- data.frame(suggested_wordforms)
colnames(suggested_wordforms) <- c("item")
data_filtered                 <- data_filtered[1:2]
suggested_wordforms           <- merge(data_filtered, suggested_wordforms, by = "item")
write_delim(
suggested_wordforms,
output_path,
col_names    = FALSE,
delim        = "\t",
quote_escape = FALSE
)
library(readr)
install.packages("readr")
library(readr)
source("stats/scripts/load_data.R")
# This script bins wordforms based on their corpus dispersions
# (measured using Deviation of Proportions (DP))
# update this variable to point to the tab-delimited file of
# wordforms, frequencies, and dispersions
input_path <- "stats/data/Nuuchahnulth.tsv"
# update this variable to point to the location where
# you would like the list of selected wordforms generated
output_path <- "data/Nuuchahnulth/suggested_wordforms.txt"
# the number of wordforms to suggest
num_wordforms <- 100
# load data
data <- load_data(input_path)
data_filtered      <- data[which(data$frequency >= 4), ]
data_filtered$bins <- cut(data_filtered$dispersion, breaks = num_wordforms)
select_wordform_from_bin <- function(bin) {
observations <- data_filtered$item[which(data_filtered$bins == bin)]
if (length(observations)) return(sample(observations, size = 1))
else return(NA)
}
bins                          <- levels(data_filtered$bins)
suggested_wordforms           <- sapply(bins, select_wordform_from_bin)
suggested_wordforms           <- data.frame(suggested_wordforms)
colnames(suggested_wordforms) <- c("item")
data_filtered                 <- data_filtered[1:2]
suggested_wordforms           <- merge(data_filtered, suggested_wordforms, by = "item")
write_delim(
suggested_wordforms,
output_path,
col_names    = FALSE,
delim        = "\t",
quote_escape = FALSE
)
install.packages("tidyverse")
library(readr)
source("stats/scripts/load_data.R")
# This script bins wordforms based on their corpus dispersions
# (measured using Deviation of Proportions (DP))
# update this variable to point to the tab-delimited file of
# wordforms, frequencies, and dispersions
input_path <- "stats/data/Nuuchahnulth.tsv"
# update this variable to point to the location where
# you would like the list of selected wordforms generated
output_path <- "data/Nuuchahnulth/suggested_wordforms.txt"
# the number of wordforms to suggest
num_wordforms <- 100
# load data
data <- load_data(input_path)
data_filtered      <- data[which(data$frequency >= 4), ]
data_filtered$bins <- cut(data_filtered$dispersion, breaks = num_wordforms)
select_wordform_from_bin <- function(bin) {
observations <- data_filtered$item[which(data_filtered$bins == bin)]
if (length(observations)) return(sample(observations, size = 1))
else return(NA)
}
bins                          <- levels(data_filtered$bins)
suggested_wordforms           <- sapply(bins, select_wordform_from_bin)
suggested_wordforms           <- data.frame(suggested_wordforms)
colnames(suggested_wordforms) <- c("item")
data_filtered                 <- data_filtered[1:2]
suggested_wordforms           <- merge(data_filtered, suggested_wordforms, by = "item")
write_delim(
suggested_wordforms,
output_path,
col_names    = FALSE,
delim        = "\t",
quote_escape = FALSE
)
install.packages("tidyverse")
library(tidyverse)
source("stats/scripts/load_data.R")
# This script bins wordforms based on their corpus dispersions
# (measured using Deviation of Proportions (DP))
# update this variable to point to the tab-delimited file of
# wordforms, frequencies, and dispersions
input_path <- "stats/data/Nuuchahnulth.tsv"
# update this variable to point to the location where
# you would like the list of selected wordforms generated
output_path <- "data/Nuuchahnulth/suggested_wordforms.txt"
# the number of wordforms to suggest
num_wordforms <- 100
# load data
data <- load_data(input_path)
data_filtered      <- data[which(data$frequency >= 4), ]
data_filtered$bins <- cut(data_filtered$dispersion, breaks = num_wordforms)
select_wordform_from_bin <- function(bin) {
observations <- data_filtered$item[which(data_filtered$bins == bin)]
if (length(observations)) return(sample(observations, size = 1))
else return(NA)
}
bins                          <- levels(data_filtered$bins)
suggested_wordforms           <- sapply(bins, select_wordform_from_bin)
suggested_wordforms           <- data.frame(suggested_wordforms)
colnames(suggested_wordforms) <- c("item")
data_filtered                 <- data_filtered[1:2]
suggested_wordforms           <- merge(data_filtered, suggested_wordforms, by = "item")
write_delim(
suggested_wordforms,
output_path,
col_names    = FALSE,
delim        = "\t",
quote_escape = FALSE
)
source("stats/scripts/load_data.R")
library(readr)
