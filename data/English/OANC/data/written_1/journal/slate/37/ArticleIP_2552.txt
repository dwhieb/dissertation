
   
   
      
         
            Getting_VBG Buggy_NNP Wit_NNP It_PRP 

            There_EX I_PRP was_VBD ,_, late_JJ one_CD night_NN
in_IN the_DT Microsoft_NNP software_NN factory_NN ,_, furiously_RB exterminating_VBG some_DT of_IN the_DT skankier_NN
bugs_NNS from_IN my_PRP$ areas_NNS of_IN Outlook_NNP 97_CD ,_, our_PRP$ e-mail_JJ program_NN ._. My_PRP$ skill_NN at_IN writing_VBG
software_NN ,_, I_PRP believe_VBP ,_, is_VBZ God-given_NNP ._. My_PRP$ legendary_JJ success_NN at_IN squashing_VBG bugs_NNS ,_, I_PRP
believe_VBP ,_, is_VBZ the_DT result_NN of_IN my_PRP$ tendency_NN to_TO write_VB buggy_NN code_NN ._. So_IN it_PRP was_VBD no_DT
surprise_NN when_WRB one_CD of_IN the_DT dozens_NNS of_IN software_NN testers_NNS employed_VBN by_IN the_DT Outlook_NNP 97_CD
team_NN sent_VBD me_PRP urgent_JJ e-mail_JJ ._. He_PRP had_VBD discovered_VBN a_DT giant_JJ bug_NN in_IN my_PRP$ area_NN and_CC was_VBD
insistent_JJ I_PRP inspect_VBP it_PRP ._.

            The_DT first_JJ
thing_NN you_PRP do_VBP when_WRB a_DT tester_NN brings_VBZ you_PRP a_DT bug_NN is_VBZ reproduce_VB it_PRP ._. In_IN this_DT case_NN ,_,
reproduction_NN would_MD be_VB easy_JJ ._. Step_NN 1_CD :_: Create_VB an_DT appointment_NN in_IN Outlook_NNP 's_POS
calendar_NN ._. Step_NN 2_CD :_: Add_VB a_DT conference_NN room_NN to_TO the_DT appointment_NN ._. So_RB far_RB so_RB good_JJ ._.
Step_NN 3_CD :_: Change_NNP the_DT date_NN of_IN the_DT appointment_NN to_TO the_DT year_NN 4500_CD ._. Step_NN 4_CD :_: Switch_NNP to_TO
the_DT meeting_NN planner_NN page_NN ._. Step_NN 5_CD ._. ._. ._.

            Istopped_NNP reading_VBG the_DT tester_NN 's_POS e-mail_JJ and_CC wrote_VBD back_RB ._.
Although_IN it_PRP was_VBD a_DT bad_JJ bug_NN ,_, I_PRP felt_VBD confident_JJ I_PRP could_MD ignore_VB it_PRP for_IN ,_, oh_UH ,_, 2_CD ,_, 000_CD
years_NNS or_CC so_RB ._. But_CC Shuman_NNP ,_, the_DT crowds_NNS chant_NN ,_, does_VBZ n't_RB that_WDT mean_VBP you_PRP willingly_RB
shipped_VBD buggy_NN software_NN ?_. That_DT you_PRP deliberately_RB added_VBD to_TO the_DT torment_VB of_IN millions_NNS
of_IN computer_NN users_NNS who_WP ca_MD n't_RB get_VB their_PRP$ software_NN to_TO work_VB ?_. Why_WRB should_MD n't_RB
Outlook_NNP 97_CD be_VB able_JJ to_TO handle_VB appointments_NNS in_IN specified_VBN conference_NN rooms_NNS in_IN
future_JJ millenniums_NNS ?_.

            Well_RB ,_,
folks_NNS ,_, I_PRP 've_VBP got_VBN news_NN for_IN you_PRP :_: Nothing_NN is_VBZ perfect_JJ ,_, and_CC software_NN is_VBZ no_DT exception_NN ._.
Today_NN 's_POS robust_JJ software_NN products_NNS from_IN Microsoft_NNP ,_, Lotus_NNP ,_, Borland_NNP ,_, Corel_NNP ,_, and_CC all_PDT
the_DT rest_NN are_VBP too_RB damn_RB complex_JJ to_TO be_VB perfect_JJ ._. How_WRB complex_JJ are_VBP they_PRP ?_. Microsoft_NNP 's_POS
Windows_NNP 95_CD operating_VBG system_NN contains_VBZ more_JJR than_IN 10_CD million_CD lines_NNS of_IN code_NN ,_, or_CC
instructions_NNS ._. Compare_VB that_IN with_IN the_DT 6_CD million_CD parts_NNS in_IN a_DT Boeing_NNP 747_CD ,_, 3_CD million_CD
of_IN which_WDT are_VBP fasteners_NNS such_JJ as_IN rivets_NNS ._. Fasteners_NNP are_VBP wonderful_JJ ,_, but_CC they_PRP do_VBP n't_RB
interact_NN much_JJ with_IN one_CD another_DT ._. The_DT difficult_JJ thing_NN about_IN writing_VBG software_NN is_VBZ
that_IN all_DT 10_CD million_CD parts_NNS of_IN Windows_NNP 95_CD are_VBP tightly_RB coupled_VBN ._. Pop_NNP a_DT rivet_NN on_IN
your_PRP$ 747_CD ,_, and_CC you_PRP 're_VBP still_RB likely_JJ to_TO make_VB your_PRP$ destination_NN ._. But_CC bollix_NN up_RB one_CD
line_NN of_IN code_NN in_IN Windows_NNP 95_CD ,_, and_CC users_NNS '_POS computer_NN screens_NNS will_MD turn_VB screaming_VBG
blue_NN and_CC crash_NN ._.

            
What_WP are_VBP bugs_NNS ,_, anyway_RB ?_. And_CC what_WP makes_VBZ them_PRP more_RBR
insidious_JJ than_IN a_DT few_JJ blown_VBN rivets_NNS ?_. Bugs_NNP are_VBP errors_NNS ,_, somewhat_RB analogous_JJ to_TO typos_NNS
or_CC factual_JJ errors_NNS in_IN newspaper_NN articles_NNS ,_, but_CC the_DT difference_NN is_VBZ that_IN a_DT typo_NN is_VBZ
almost_RB never_RB enough_RB to_TO spoil_VBP an_DT entire_JJ edition_NN of_IN a_DT newspaper_NN ,_, whereas_IN a_DT tiny_JJ
error_NN in_IN a_DT software_NN program_NN can_MD scuttle_VB it_PRP ._. Take_VB the_DT year_NN 2000_CD bug_NN for_IN example_NN ._.
The_DT Y_NNP 2_CD K_NNP bug_NN arises_VBZ because_IN past_JJ programmers_NNS expressed_VBD years_NNS with_IN two_CD digits_NNS
rather_RB than_IN four_CD ,_, so_IN that_IN the_DT year_NN 1915_CD is_VBZ written_VBN as_IN 15_CD ._. Thus_RB to_TO the_DT computer_NN ,_,
the_DT year_NN 2015_CD looks_VBZ the_DT same_JJ as_IN the_DT year_NN 1915_CD ._. (_( Click_NNP to_TO find_VB out_IN why_WRB
programmers_NNS deliberately_RB created_VBD the_DT Y_NNP 2_CD K_NNP bug_NN ,_, and_CC why_WRB that_WDT was_VBD n't_RB such_JJ a_DT crazy_JJ
thing_NN to_TO do_VB ._. )_) The_DT Y_NNP 2_CD K_NNP bug_NN is_VBZ a_DT very_RB bad_JJ bug_NN ;_: the_DT one_CD tiny_JJ decision_NN about_IN how_WRB to_TO
express_VB dates_NNS can_MD bring_VB a_DT whole_JJ program_NN to_TO a_DT screeching_VBG halt_NN ._.

            Bugs_NNP fall_NN
into_IN two_CD major_JJ categories_NNS :_: crashing_VBG and_CC functional_JJ ._. Crashing_VBG bugs_NNS are_VBP so_RB
naughty_NN that_IN they_PRP cause_VBP programs_NNS to_TO stop_VB functioning_VBG ._. Usually_RB ,_, this_DT results_NNS in_IN
friendly_JJ warnings--such_JJ as_IN "_'' Illegal_NNP Operation_NN "_'' for_IN Windows_NNP users_NNS or_CC the_DT lovely_JJ
picture_NN of_IN a_DT bomb_NN for_IN Macintosh_NNP users_NNS ._. The_DT other_JJ type_NN of_IN bug_NN is_VBZ a_DT functional_JJ
bug--e_JJ ._. g_SYM ._. ,_, the_DT Y_NNP 2_CD K_NNP bug--which_JJ is_VBZ subtler_NN in_IN nature_NN ._. Functional_NNP bugs_NNS cause_VBP
programs_NNS to_TO fail_VB or_CC to_TO give_VB erroneous_JJ results_NNS ._. The_DT number_NN of_IN either_DT kind_NN of_IN bug_NN
is_VBZ proportional_JJ to_TO the_DT size_NN of_IN the_DT program_NN ._.

            But_CC ,_, as_IN Shuman_NNP can_MD tell_VB you_PRP ,_, it_PRP 's_VBZ easy_JJ to_TO write_VB bugs_NNS into_IN
simple_JJ ,_, short_JJ programs_NNS ,_, like_IN one_CD designed_VBN to_TO find_VB a_DT single_JJ word_NN in_IN a_DT sentence_NN ._.
Actually_RB ,_, it_PRP 's_VBZ not_RB that_IN simple_JJ an_DT operation_NN ._. You_PRP must_MD write_VB perfectly_RB logical_JJ
statements_NNS in_IN a_DT language_NN that_IN the_DT computer_NN can_MD understand_VB ._. If_IN you_PRP were_VBD to_TO write_VB
this_DT program_NN in_IN C_NNP ,_, a_DT popular_JJ programming_NN language_NN ,_, it_PRP would_MD take_VB three_CD lines_NNS of_IN
code_NN to_TO tell_VB the_DT program_NN to_TO look_VB at_IN the_DT beginning_NN of_IN the_DT word_NN and_CC the_DT beginning_NN
of_IN each_DT sentence_NN ._. Next_JJ ,_, you_PRP 'd_MD instruct_VB the_DT computer_NN to_TO match_VB each_DT character_NN in_IN
the_DT word_NN you_PRP are_VBP searching_VBG for_IN to_TO the_DT corresponding_JJ characters_NNS in_IN the_DT sentence_NN ._.
If_IN the_DT letters_NNS are_VBP the_DT same_JJ ,_, you_PRP continue_VBP ._. This_DT would_MD take_VB five_CD lines_NNS of_IN code_NN ._.
Then_RB you_PRP would_MD have_VB to_TO confirm_VB you_PRP have_VBP gone_VBN through_IN all_PDT the_DT letters_NNS in_IN the_DT
word_NN successfully_RB ._. Chalk_NNP up_RB two_CD more_JJR lines_NNS ._. Then_RB you_PRP 'd_MD need_VB to_TO see_VB if_IN there_EX are_VBP
any_DT letters_NNS in_IN the_DT sentence_NN left_VBD to_TO compare_VB ._. Two_CD lines_NNS of_IN code_NN ._. Lastly_NNP ,_, you_PRP
would_MD have_VB to_TO inform_VB the_DT user_NN of_IN your_PRP$ program_NN what_WP happened_VBD ._. Another_DT three_CD
lines--_JJ 15_CD lines_NNS of_IN code_NN to_TO find_VB one_CD word_NN !_. Shuman_NNP is_VBZ exhausted_VBN just_RB thinking_VBG
about_IN it_PRP ,_, and_CC he_PRP has_VBZ n't_RB even_RB started_VBN creating_VBG bugs_NNS !_. Dropping_NNP one_CD essential_JJ
instruction_NN or_CC writing_VBG the_DT lines_NNS of_IN code_NN in_IN the_DT wrong_JJ order_NN could_MD spell_VB
destruction_NN for_IN my_PRP$ little_JJ program_NN ._. (_( For_IN all_PDT the_DT gory_NN details_NNS on_IN how_WRB I_PRP actually_RB
wrote_VBD this_DT program_NN in_IN C_NNP ,_, click_NN ._. )_)

            Civilians_NNP
assume_VB software_NN companies_NNS spend_VBP most_JJS of_IN their_PRP$ time_NN writing_VBG software_NN ._. Wrong_JJ !_.
They_PRP spend_VBP most_JJS of_IN their_PRP$ time_NN testing_NN software_NN !_. After_IN developers_NNS write_VBP a_DT
few_JJ lines_NNS of_IN code_NN ,_, we_PRP test_VBP it_PRP for_IN bugs_NNS and_CC sit_VB down_RB with_IN our_PRP$ testers_NNS to_TO imagine_VB
all_DT the_DT ways_NNS the_DT program_NN will_MD be_VB used_VBN ._. Good_JJ testers_NNS make_VBP gnarly_RB demands_NNS on_IN the_DT
code_NN ,_, inventing_VBG disaster_NN scenarios_NNS worthy_JJ of_IN Hollywood_NNP ._. (_( My_PRP$ favorite_JJ tester_NN
routinely_RB yanked_VBD the_DT power_NN cord_NN out_IN of_IN the_DT computer_NN during_IN Outlook_NNP operations_NNS
to_TO see_VB how_WRB the_DT program_NN handled_VBD loss_NN of_IN power_NN ._. )_) Testers_NNP run_VBD the_DT software_NN on_IN
different_JJ PCs--how_NNP will_MD it_PRP work_VBP on_IN a_DT Hewlett_NNP Packard_NNP computer_NN vs_NNS ._. a_DT Packard_NNP
Bell_NNP ?_. They_PRP print_VBP with_IN old_JJ printers_NNS ._. They_PRP enter_VBP thousands_NNS of_IN lines_NNS of_IN text_NN into_IN
small_JJ fields_NNS ._. One_CD tester_NN placed_VBN most_JJS of_IN the_DT text_NN of_IN the_DT King_NNP James_NNP Bible_NNP into_IN
an_DT e-mail_JJ message_NN ,_, sent_VBD it_PRP to_TO himself_PRP ,_, and_CC then_RB replied_VBD to_TO the_DT e-mail_JJ ._. Outlook_NNP
choked_VBD at_IN this_DT point_NN ,_, demanding_VBG a_DT day_NN of_IN rest_NN ._. God_NNP was_VBD watching_VBG ._. Here_RB at_IN

                  Slate_NNP
                we_PRP rarely_RB tug_NN on_IN the_DT power_NN cord_NN to_TO test_VB our_PRP$ code_NN ,_, but_CC we_PRP do_VBP
test_VB the_DT site_NN on_IN a_DT variety_NN of_IN browsers_NNS ._.

            
At_IN the_DT beginning_NN of_IN a_DT software_NN project_NN ,_, code_NN is_VBZ
buggy_NN ,_, because_IN we_PRP 're_VBP still_RB getting_VBG different_JJ parts_NNS of_IN the_DT program_NN to_TO cooperate_VB ._.
A_DT line_NN of_IN code_NN that_WDT tells_VBZ the_DT program_NN how_WRB to_TO print_VB may_MD clash_VB with_IN the_DT code_NN that_WDT
tells_VBZ the_DT program_NN how_WRB to_TO draw_VB the_DT screen_NN ._. As_IN testers_NNS hunt_VBP bugs_NNS ,_, developers_NNS
conspire_VBP with_IN the_DT marketing_NN department_NN to_TO add_VB features_NNS to_TO the_DT product_NN ,_, which_WDT
breeds_NNS more_RBR potential_JJ bugs_NNS ._. Adding_VBG new_JJ features_NNS to_TO a_DT stable_JJ program_NN can_MD be_VB
dangerous_JJ ._. Developers_NNS can_MD create_VB bugs_NNS faster_JJR than_IN testers_NNS can_MD capture_VB them_PRP ,_, and_CC
testers_NNS can_MD capture_VB them_PRP faster_JJR than_IN developers_NNS can_MD kill_VB them_PRP ,_, so_IN the_DT only_JJ way_NN
to_TO finish_VB a_DT product_NN is_VBZ to_TO stop_VB adding_VBG features_NNS and_CC start_VB paying_VBG attention_NN to_TO
the_DT bugs_NNS ._.

            
Preventing_NNP developers_NNS from_IN adding_VBG features_NNS is_VBZ not_RB as_RB easy_JJ as_IN it_PRP sounds_VBZ ._. They_PRP
love_VBP to_TO build_VB things--not_JJ to_TO fix_VB things_NNS ._. One_CD way_NN to_TO deter_VB them_PRP is_VBZ to_TO break_VB
their_PRP$ arms_NNS with_IN a_DT baseball_NN bat_NN ._. Given_VBN infinite_NN time_NN ,_, developers_NNS would_MD prefer_VB to_TO
add_VB feature_NN upon_IN feature_NN and_CC never_RB release_VB their_PRP$ product_NN ._. But_CC marketing_NN people_NNS
are_VBP the_DT worst_JJS offenders_NNS when_WRB it_PRP comes_VBZ to_TO wanting_VBG to_TO add_VB new_JJ features_NNS ,_,
generating_VBG loud_JJ choruses_NNS of_IN "_'' NO_DT "_'' even_RB from_IN otherwise_RB enthusiastic_JJ
developers_NNS ._.

            Agood_NNP tester_NN is_VBZ like_IN the_DT Roach_NNP Motel_NNP ,_, corralling_VBG bugs_NNS and_CC
ensnaring_VBG them_PRP ._. "_'' Look_VB what_WP I_PRP caught_VBD !_. "_'' the_DT tester_NN meows_NNS as_IN he_PRP drops_VBZ the_DT vermin_NN
on_IN the_DT developer_NN 's_POS doorstep_NN ._. Testers_NNP are_VBP as_IN vain_JJ about_IN finding_VBG bugs_NNS as_IN I_PRP am_VBP
about_IN squashing_VBG them_PRP ,_, hence_RB the_DT excessive_JJ pride_NN of_IN my_PRP$ tester_NN who_WP uncovered_VBD the_DT
year_NN 4500_CD bug_NN ._.

            Having_VBG
found_VBN a_DT bug_NN ,_, it_PRP 's_VBZ not_RB easy_JJ to_TO find_VB what_WP caused_VBD it_PRP ._. Where_WRB is_VBZ the_DT bad_JJ assumption_NN
that_WDT got_VBD us_PRP into_IN trouble_NN ?_. Some_DT bugs_NNS are_VBP hell_NN to_TO track_VB down_RB ._. One_CD crashing_VBG bug_NN in_IN
Outlook_NNP would_MD reproduce_VB only_RB on_IN a_DT Gateway_NNP computer_NN equipped_VBN with_IN a_DT Matrox_NNP video_NN
card_NN ._. Eventually_RB ,_, we_PRP tracked_VBD the_DT bug_NN down_IN to_TO one_CD single_JJ line_NN of_IN code_NN that_WDT
failed_VBD because_IN it_PRP assumed_VBD all_DT graphics_NNS cards_NNS are_VBP created_VBN equal_JJ ._. They_PRP are_VBP
not_RB ._.

            
Bug_NN fixing_VBG is_VBZ time_NN consuming_NN ._. Developers_NNS must_MD
review_VB every_DT line_NN of_IN code_NN ,_, one_CD at_IN a_DT time_NN ._. They_PRP often_RB deploy_NN programs_NNS called_VBN
"_'' debuggers_NNS ,_, "_'' which_WDT allow_VBP them_PRP to_TO peer_VB into_IN the_DT innards_NNS of_IN the_DT software_NN as_IN it_PRP
runs_VBZ ._. As_IN developers_NNS kill_VBP the_DT bugs_NNS ,_, they_PRP incorporate_VB the_DT solutions_NNS into_IN a_DT daily_JJ
"_'' build_VB "_'' of_IN the_DT program_NN and_CC test_VB the_DT build_VB to_TO make_VB certain_JJ the_DT solutions_NNS do_VBP n't_RB
cause_VB additional_JJ bugs_NNS ._. Outlook_NNP 97_CD went_VBD through_IN several_JJ thousand_CD builds_VBZ before_IN
it_PRP was_VBD released_VBN ,_, each_DT build_VB bringing_VBG us_PRP infinitesimally_RB closer_JJR to_TO
perfection_NN ._.

            As_IN we_PRP
approach_VBP perfection_NN ,_, though_RB ,_, the_DT law_NN of_IN diminishing_VBG returns_NNS kicks_VBZ in_IN ._. Are_VBP the_DT
existing_VBG bugs_NNS fatal_JJ defects_NNS ,_, or_CC can_MD we_PRP live_VB with_IN them_PRP ?_. We_PRP developers_NNS have_VBP a_DT
name_NN for_IN bugs_NNS we_PRP can_MD live_VB with_IN :_: "_'' known_VBN issues_NNS ._. "_'' By_IN the_DT time_NN Outlook_NNP 97_CD was_VBD
released_VBN in_IN November_NNP 1997_CD ,_, I_PRP suspect_VBP I_PRP was_VBD intimate_JJ with_IN every_DT one_CD of_IN its_PRP$ known_VBN
issues_NNS ._. I_PRP also_RB suspect_VBP that_IN 99_CD percent_NN of_IN all_DT bugs_NNS reported_VBN by_IN users_NNS to_TO
software_NN companies_NNS have_VBP already_RB been_VBN noted_VBN and_CC prioritized_JJ for_IN fixing_VBG by_IN some_DT
late-night_JJ team_NN of_IN code_NN warriors_NNS ._.

            The_DT worst_JJS bug_NN is_VBZ a_DT "_'' show_NN stopper_NN "_'' bug_NN ,_, the_DT bug_NN that_WDT will_MD
croak_VBP the_DT entire_JJ program_NN ._. When_WRB a_DT show_NN stopper_NN is_VBZ discovered_VBN ,_, we_PRP drop_VBP everything_NN
and_CC find_VB a_DT fix_NN ._. But_CC we_PRP make_VBP the_DT absolutely_RB smallest_JJS necessary_JJ change_NN to_TO kill_VB
the_DT bug_NN so_IN that_IN the_DT other_JJ parts_NNS of_IN the_DT system_NN can_MD continue_VB to_TO work_VB ,_, oblivious_JJ
to_TO the_DT chaos_NN around_IN them_PRP ._.

            Developers_NNS
seek_VBP a_DT balance_NN between_IN "_'' it_PRP 's_VBZ done_VBN "_'' and_CC "_'' it_PRP 's_VBZ perfect_JJ "_'' when_WRB writing_VBG software_NN ._.
But_CC it_PRP 's_VBZ difficult_JJ to_TO know_VB when_WRB to_TO stop_VB ._. You_PRP are_VBP always_RB only_RB a_DT few_JJ late_JJ nights_NNS
away_RB from_IN perfection_NN ._. Where_WRB refining_VBG a_DT 747_CD is_VBZ ,_, shall_MD we_PRP say_VB ,_, somewhat_RB involved_VBN ,_,
software_NN writing_VBG is_VBZ powered_VBN on_IN caffeine_NN and_CC little_JJ more_JJR ._. In_IN fact_NN ,_, one_CD
enterprising_JJ young_JJ developer_NN strung_NN out_IN on_IN Mountain_NNP Dew_NNP eventually_RB fixed_VBD the_DT
year_NN 4500_CD bug_NN in_IN Outlook_NNP 98_CD ,_, making_VBG it_PRP safe_JJ for_IN everyone_NN making_VBG appointments_NNS in_IN
the_DT next_JJ several_JJ millenniums_NNS ._.

            
               If_IN you_PRP
missed_VBD our_PRP$ links_NNS in_IN the_DT article_NN ,_, click_NN to_TO read_VB about_IN why_WRB programmers_NNS created_VBD
the_DT Y_NNP 2_CD K_NNP bug_NN and_CC for_IN a_DT "_'' simple_JJ "_'' program_NN in_IN C_NNP ._.
            

         
      
   
